/* *************************************************************************
*  SnpMVC_Simple.jsx
*  DESCRIPTION: Пример простейшего диалога/приложения с использованием библиотеки MVC
*  @@@BUILDINFO@@@ SnpMVC_Simple.jsx 1.01 Sun Dec 29 2013 16:37:02 GMT+0200
* 
* NOTICE: Продемонстрировано простейшее связывание модели с двумя её представлениями. 
* 
/* *************************************************************************
* © Вячеслав aka SlavaBuck, 29.12.2013.  slava.boyko@hotmail.com
*/
#include "../../MVC.jsx"

// Создаём объект приложения:
var myApp = new MVC.Application();

myApp.Init = function() {
    // Добавляем модель:
    var myData = myApp.addModel({
        id:"myData", 
        value:{ txt:"Очень большой текст его можно редактировать" } 
    });

    // Добавляем представления:
    myApp.addView({ id:"st", view:"statictext" });
    myApp.addView({ id:"et", view:"edittext { characters:30 }" });
    myApp.addView({ id:"bt", view:"button { text:'Ok'}" });  // данное представление не связано ни с одной моделью, оно просто добавится к диалогу в качестве кнопки выхода. 

    // Добавляем контролёры.
    myApp.addController({ binding:"myData.value.txt:st.text" });
    myApp.addController({ binding:"myData.value.txt:et.text" });

    // Пример работы динамической связи модели с представлениями: 
    // изменим свойство модели myData прямо в скрипте, что сразу приведёт к изменению связанных 
    // свойств в представлениях st и et (statictext и edittext). 
    // Можно попробовать закомментировать данную строку и убедится в том, что представления остануться 
    // проинициализированны первоначальным значением ("Очень большой текст...").
    myData.value.txt = "Данные модели myData, доступные для редактирования";
};

// Запуск приложения:
myApp.run();