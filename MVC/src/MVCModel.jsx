// --------------------------------------------------------------
// @@@BUILDINFO@@@
// MVCModel - Модель
// --------------------------------------------------------------

/**
 * @extends MVCObject#
 * @class   MVCModel
 * @summary MVC-Объект <b>Модель</b>.
 * @desc    Является базовым объектом пользовательских данных, включая методы для работы с ними. Фактически, конструктор
 *  формирует минимальную базовую "обёртку" для пользовательских данных, которая позволяет связывать эти данные с 
 *  представлениями с тем, чтобы иметь простой механизм отображения и редактирования этих данных в представлениях.
 *  <p><i><b>ПРИМЕЧАНИЕ:</b> на практике, для создания моделей, практически всегда предпочтительнее пользоваться методом
 *  {@linkcode MVCApplication#addModel MVCApplication.addModel(...)} чем использовать непосредственно "родной" конструктор.</i></p>
 *          
 * @param {string}          идентификатор модели (при добавлении объекта в коллекцию - значение свойства id должено 
 *                          быть уникальным в рамках этой коллекции);
 *                                 
 * @property {string}   	id          id (идентификатор) объекта;
 * @property {boolean}     _status_     статус модели, хранит результат последней валидации объекта, устанавливается по
 *                                      результатам вызова метода validator() (по умолчанию всегда true);
 * @property {Collection}  _controllers коллекция контролёров модели (поддерживается средствами библиотеки и 
 *                                      содержит все контролёры, ассоциированные с данной моделью)
 * @returns {MVCModel}
 * @example <caption>Создание Модели с последующим расширением:</caption>
 * var myData = new MVCModel("myData");
 * myData.value = {};
 * myData.value.txt = "Мои данные";
 * myData.print = function() { $.writeln(this.value.txt) };
 * // ...
 * // создав модель с помощью конструктора, перед связыванием с
 * // представлением, её необходимо явно добавить в коллекцию
 * // моделей приложения:
 * myApp.models.add(myData);
 *
 * @example <caption>создание на основе литерала:</caption>
 * var myData = new MVCModel({
 *     id:"myData", 
 *     value:{ txt:"Мои данные" },
 *     print:function() { $.writeln(this.value.txt) }
 * });
 */
function MVCModel(id) {
    if (!(this instanceof MVCModel)) return new MVCModel(id);
    MVCModel.prototype.__super__.constructor.call(this, id);
    this._status_ = true;
    this._controllers = new Collection();
};

inherit(MVCModel, MVCObject);

/**
 * @method  MVCModel#isValid
 * @desc    Проверка статуса модели - возвращает результат последней валидации <b>Модели</b>. По умолчанию всегда возвращает
 *  <b>true</b> (валидация модели происходит автоматически при каждом обновлении её свойств, ассоциированных с тем или иным 
 *  представлением путём вызова метода-валидации. Метод-валидатор должен определяется пользователем 
 *  см. {@linkcode MVCModel#validator validator()} и по умолчанию всегда возвращает <b>true</b>. }
 * 
 * @returns {boolean} Cтатус модели.
 */
MVCModel.prototype.isValid = function() { 
    return this._status_; 
};

/**
 * @method  MVCModel#validator
 * @summary Сигнатура <b>метода-валидатора Модели</b>. 
 * @desc    Предназначен для переопределения в реальных объектах-моделях. Каждый раз при обновлении Модели вызывается 
 *  диспетчером приложения автоматически. Метод должен на основе анализа аргументов определить их корректность
 *  и вернуть соответствующие значение, которое будет автоматически присвоено свойству модели {@linkcode MVCModel#_status_ _status_}
 *  Именно значение этого свойства всегда возвращаться вызовом метода .{@linkcode MVCModel#isValid isValid()}.
 *  <p>Вызов метода происходит в контексте Модели, для которой он определён, уже после обновления значения свойства!
 *  При вызове методу автоматически передаются параметры, аналогично аргументам метода <code>Object.prototype.watch(...)</code>.</p>
 * 
 * @param  {string}         key    имя изменившегося свойства;
 * @param  {any}            oldVal старое значение свойства;
 * @param  {any}            newVal новое значение свойства;
 * @param  {MVCController}  ctrl   ссылка на контролёр, в контексте которого произошёл вызов валидации.
 * 
 * @returns {boolean}        Результат валидации - присваивается диспетчером Приложения свойству ._status_ данной модели.
 * @example <caption>см. метод MVCApplication.addModel({...})</caption>
 */
MVCModel.prototype.validator = function(key, oldVal, newVal, ctrl) { 
    return true;
};
