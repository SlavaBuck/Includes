/**
 * Слияние объектов (кассическая реализация extend из underscore.js).
 * Функция получает два и более аргумента и выполняет "поверхностное" слияние (без рекурсивного обхода в глубину) свойств всех 
 * объектов, переданных в аргументах вызова (используется классическая реализация функции extend из underscore.js). Результат 
 * слияния объединяется в объекте, указанном в аргументе первым. Кол-во объектов-источников не ограничено. Если объекты-источники 
 * имеют одноименные свойства, то значения каждого будут затерты значениями из следующего (аналогично merge() и clone()).
 * В отличии от работы методов merge() и clone() — результатирующий объект получает ссылки на свойства, но не копии свойств
 * объектов. Таким образом, результатирующий объект остаётся "связанным" со своими "родителями" и любое последующее имзменение
 * значений свойств в "родительских" объектах будет отражаться на значении этих же свойств в результатирующем объекте.
 * Функции изменяет свой первый аргумент.
 *
 * @global
 * @param  {object} obj    Расширяемый объект. Следом, через запятую, перечисляются объекты-источники, свойствами которых
 *                         расширяется данный объект.
 * @return {object}        Возвращает свой первый аргумент - расширенный объект obj.
 * @example 
 * extend({name: 'moe'}, {age:35}); // => {name:'moe', age:35}
 */
function extend(obj) {
    each(   Array.prototype.slice.call(arguments, 1), 
            function(source) { if (source) for (var prop in source) obj[prop] = source[prop]; } ); // each
    return obj;
};